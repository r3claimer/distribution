From 271086da26bad5312e0281cfdca9e4d0c6204b8e Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Tue, 2 Apr 2024 04:09:38 +0400
Subject: [PATCH 1/7] drivers: input: singleadc_quadsaradc joystick

* Duplicate singleadc driver for modifications
---
 drivers/input/joystick/Kconfig                |    5 +
 drivers/input/joystick/Makefile               |    3 +-
 .../input/joystick/singleadc_quadsaradc_joy.c | 1087 +++++++++++++++++
 3 files changed, 1094 insertions(+), 1 deletion(-)
 create mode 100644 drivers/input/joystick/singleadc_quadsaradc_joy.c

diff --git a/drivers/input/joystick/Kconfig b/drivers/input/joystick/Kconfig
index 32982bd77..b9a6d626c 100644
--- a/drivers/input/joystick/Kconfig
+++ b/drivers/input/joystick/Kconfig
@@ -398,6 +398,11 @@ config JOYSTICK_SINGLEADCJOY
 	help
 	  The 1-in 4-out SARADC joypad driver.
 
+config JOYSTICK_SINGLEADC_QUADSAR_JOY
+	tristate "Quad SARADC dual-joystick gamepad driver"
+	help
+	  The 4-in 4-out SARADC joypad driver.
+
 config JOYSTICK_N64
 	bool "N64 controller"
 	depends on MACH_NINTENDO64
diff --git a/drivers/input/joystick/Makefile b/drivers/input/joystick/Makefile
index f0c22c069..5d48aafad 100644
--- a/drivers/input/joystick/Makefile
+++ b/drivers/input/joystick/Makefile
@@ -31,7 +31,8 @@ obj-$(CONFIG_JOYSTICK_QWIIC)		+= qwiic-joystick.o
 obj-$(CONFIG_JOYSTICK_SEESAW)		+= adafruit-seesaw.o
 obj-$(CONFIG_JOYSTICK_SENSEHAT)	+= sensehat-joystick.o
 obj-$(CONFIG_JOYSTICK_SIDEWINDER)	+= sidewinder.o
-obj-$(CONFIG_JOYSTICK_SINGLEADCJOY)	+= singleadcjoy.o
+obj-$(CONFIG_JOYSTICK_SINGLEADCJOY)    += singleadcjoy.o
+obj-$(CONFIG_JOYSTICK_SINGLEADC_QUADSAR_JOY)	+= singleadc_quadsaradc_joy.o
 obj-$(CONFIG_JOYSTICK_SPACEBALL)	+= spaceball.o
 obj-$(CONFIG_JOYSTICK_SPACEORB)		+= spaceorb.o
 obj-$(CONFIG_JOYSTICK_STINGER)		+= stinger.o
diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
new file mode 100644
index 000000000..f8e7f04c2
--- /dev/null
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -0,0 +1,1087 @@
+/*----------------------------------------------------------------------------*/
+
+/*
+ * Copyright (c) 2008-2021 Anbernic 
+ */
+
+/*
+ * Single SARADC dual-joystick gamepad driver
+ */
+
+/*----------------------------------------------------------------------------*/
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/slab.h>
+#include <linux/input.h>
+#include <linux/input-polldev.h>
+#include <linux/ioport.h>
+#include <linux/platform_device.h>
+#include <linux/gpio.h>
+#include <linux/gpio/consumer.h>
+#include <linux/gpio_keys.h>
+#include <linux/iio/consumer.h>
+#include <linux/iio/types.h>
+#include <linux/property.h>
+#include <linux/of_gpio.h>
+#include <linux/delay.h>
+
+/*----------------------------------------------------------------------------*/
+#define DRV_NAME "retrogame_joypad"
+#define __LEFT_JOYSTICK_INVERT__
+#define __MURMUR__
+/*----------------------------------------------------------------------------*/
+#define	ADC_MAX_VOLTAGE		1800
+#define	ADC_DATA_TUNING(x, p)	((x * p) / 100)
+#define	ADC_TUNING_DEFAULT	180
+
+struct bt_adc {
+	/* report value (mV) */
+	int value;
+	/* report type */
+	int report_type;
+	/* input device init value (mV) */
+	int max, min;
+	/* calibrated adc value */
+	int cal;
+	/*  adc scale value */
+	int scale;
+	/* invert report */
+	bool invert;
+	/* amux channel */
+	int amux_ch;
+	/* adc data tuning value([percent), p = positive, n = negative */
+	int tuning_p, tuning_n;
+};
+
+struct analog_mux {
+	/* IIO ADC Channel : amux connect channel */
+	struct iio_channel *iio_ch;
+	/* analog mux select(a,b) gpio */
+	int sel_a_gpio, sel_b_gpio;
+	/* analog mux enable gpio */
+	int en_gpio;
+};
+
+struct bt_gpio {
+	/* GPIO Request label */
+	const char *label;
+	/* GPIO Number */
+	int num;
+	/* report type */
+	int report_type;
+	/* report linux code */
+	int linux_code;
+	/* prev button value */
+	bool old_value;
+	/* button press level */
+	bool active_level;
+};
+
+struct joypad {
+	struct device *dev;
+	int poll_interval;
+
+	/* report enable/disable */
+	bool enable;
+
+	/* analog mux & joystick control */
+	struct analog_mux *amux;
+	/* analog mux max count */
+	int amux_count;
+	/* analog button */
+	struct bt_adc *adcs;
+
+	/* report interval (ms) */
+	int bt_gpio_count;
+	struct bt_gpio *gpios;
+
+	/* button auto repeat */
+	int auto_repeat;
+
+	/* report threshold (mV) */
+	int bt_adc_fuzz, bt_adc_flat;
+	/* adc read value scale */
+	int bt_adc_scale;
+	/* joystick deadzone control */
+	int bt_adc_deadzone;
+
+	struct mutex lock;
+
+	/* amux debug channel */
+	int debug_ch;
+};
+
+/*----------------------------------------------------------------------------*/
+//
+// set to the value in the boot.ini file. (if exist)
+//
+/*----------------------------------------------------------------------------*/
+static unsigned int g_button_adc_fuzz = 0;
+static unsigned int g_button_adc_flat = 0;
+static unsigned int g_button_adc_scale = 0;
+static unsigned int g_button_adc_deadzone = 0;
+
+static int button_adc_fuzz(char *str)
+{
+	if (!str)
+		return -EINVAL;
+	g_button_adc_fuzz = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-fuzz=", button_adc_fuzz);
+
+static int button_adc_flat(char *str)
+{
+	if (!str)
+		return -EINVAL;
+	g_button_adc_flat = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-flat=", button_adc_flat);
+
+static int button_adc_scale(char *str)
+{
+	if (!str)
+		return -EINVAL;
+	g_button_adc_scale = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-scale=", button_adc_scale);
+
+static int button_adc_deadzone(char *str)
+{
+	if (!str)
+		return -EINVAL;
+	g_button_adc_deadzone = simple_strtoul(str, NULL, 10);
+	return 0;
+}
+__setup("button-adc-deadzone=", button_adc_deadzone);
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static int joypad_amux_select(struct analog_mux *amux, int channel)
+{
+	/* select mux channel */
+	gpio_set_value(amux->en_gpio, 0);
+
+	switch(channel) {
+		case 0:	/* EVENT (ABS_RY) */
+			gpio_set_value(amux->sel_a_gpio, 0);
+			gpio_set_value(amux->sel_b_gpio, 0);
+			break;
+		case 1:	/* EVENT (ABS_RX) */
+			gpio_set_value(amux->sel_a_gpio, 0);
+			gpio_set_value(amux->sel_b_gpio, 1);
+			break;
+		case 2:	/* EVENT (ABS_Y) */
+			gpio_set_value(amux->sel_a_gpio, 1);
+			gpio_set_value(amux->sel_b_gpio, 0);
+			break;
+		case 3:	/* EVENT (ABS_X) */
+			gpio_set_value(amux->sel_a_gpio, 1);
+			gpio_set_value(amux->sel_b_gpio, 1);
+			break;
+		default:
+			/* amux disanle */
+			gpio_set_value(amux->en_gpio, 1);
+			return -1;
+	}
+	/* mux swtiching speed : 35ns(on) / 9ns(off) */
+	usleep_range(10, 20);
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_adc_read(struct analog_mux *amux, struct bt_adc *adc)
+{
+	int value;
+
+
+	if (joypad_amux_select(amux, adc->amux_ch))
+		return 0;
+
+	iio_read_channel_raw(amux->iio_ch, &value);
+
+	value *= adc->scale;
+#ifdef __LEFT_JOYSTICK_INVERT__
+	return value;
+#else
+	return (adc->invert ? (adc->max - value) : value);
+#endif
+}
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/retrogame_joypad/poll_interval [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_poll_interval(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->poll_interval = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_poll_interval(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->poll_interval);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(poll_interval, S_IWUSR | S_IRUGO,
+		   joypad_show_poll_interval,
+		   joypad_store_poll_interval);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/retrogame_joypad/adc_fuzz [r]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_fuzz(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->bt_adc_fuzz);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_fuzz, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_fuzz,
+		   NULL);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/retrogame_joypad/adc_flat [r]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_flat(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->bt_adc_flat);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_flat, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_flat,
+		   NULL);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/retrogame_joypad/enable [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_enable(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	mutex_lock(&joypad->lock);
+	joypad->enable = simple_strtoul(buf, NULL, 10);
+	mutex_unlock(&joypad->lock);
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_enable(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	return sprintf(buf, "%d\n", joypad->enable);
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(enable, S_IWUSR | S_IRUGO,
+		   joypad_show_enable,
+		   joypad_store_enable);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/retrogame_joypad/adc_cal [rw]
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_adc_cal(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	bool calibration;
+
+	calibration = simple_strtoul(buf, NULL, 10);
+
+	if (calibration) {
+		int nbtn;
+
+		mutex_lock(&joypad->lock);
+		for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+			struct bt_adc *adc = &joypad->adcs[nbtn];
+
+			adc->value = joypad_adc_read(joypad->amux, adc);
+			if (!adc->value) {
+				dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+					__func__, nbtn);
+				continue;
+			}
+			adc->cal = adc->value;
+		}
+		mutex_unlock(&joypad->lock);
+	}
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_adc_cal(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	int nbtn;
+	ssize_t pos;
+
+	for (nbtn = 0, pos = 0; nbtn < joypad->amux_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		pos += sprintf(&buf[pos], "adc[%d]->cal = %d\n",
+				nbtn, adc->cal);
+	}
+	pos += sprintf(&buf[pos], "adc scale = %d\n", joypad->bt_adc_scale);
+	return pos;
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(adc_cal, S_IWUSR | S_IRUGO,
+		   joypad_show_adc_cal,
+		   joypad_store_adc_cal);
+
+/*----------------------------------------------------------------------------*/
+/*
+ * ATTRIBUTES:
+ *
+ * /sys/devices/platform/retrogame_joypad/amux_debug [rw]
+ *
+ * echo [debug channel] > amux_debug
+ * cat amux_debug : debug channel mux set & adc read
+ */
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_store_amux_debug(struct device *dev,
+				      struct device_attribute *attr,
+				      const char *buf,
+				      size_t count)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+
+	joypad->debug_ch = simple_strtoul(buf, NULL, 10);
+
+	/* if error than default setting(debug_ch = 0) */
+	if (joypad->debug_ch > joypad->amux_count)
+		joypad->debug_ch = 0;
+
+	return count;
+}
+
+/*----------------------------------------------------------------------------*/
+static ssize_t joypad_show_amux_debug(struct device *dev,
+				     struct device_attribute *attr,
+				     char *buf)
+{
+	struct platform_device *pdev  = to_platform_device(dev);
+	struct joypad *joypad = platform_get_drvdata(pdev);
+	struct analog_mux *amux = joypad->amux;
+	ssize_t pos;
+	int value;
+
+	mutex_lock(&joypad->lock);
+
+	/* disable poll driver */
+	if (joypad->enable)
+		joypad->enable = false;
+
+	if (joypad_amux_select(amux, joypad->debug_ch))
+		goto err_out;
+
+	if (iio_read_channel_processed(amux->iio_ch, &value))
+		goto err_out;
+
+	pos = sprintf(buf, "amux ch[%d], adc scale = %d, adc value = %d\n",
+			joypad->debug_ch, joypad->bt_adc_scale,
+			value * joypad->bt_adc_scale);
+	goto out;
+
+err_out:
+	pos = sprintf(buf, "error : amux setup & adc read!\n");
+out:
+	mutex_unlock(&joypad->lock);
+	return pos;
+}
+
+/*----------------------------------------------------------------------------*/
+static DEVICE_ATTR(amux_debug, S_IWUSR | S_IRUGO,
+		   joypad_show_amux_debug,
+		   joypad_store_amux_debug);
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static struct attribute *joypad_attrs[] = {
+	&dev_attr_poll_interval.attr,
+	&dev_attr_adc_fuzz.attr,
+	&dev_attr_adc_flat.attr,
+	&dev_attr_enable.attr,
+	&dev_attr_adc_cal.attr,
+	&dev_attr_amux_debug.attr,
+	NULL,
+};
+
+static struct attribute_group joypad_attr_group = {
+	.attrs = joypad_attrs,
+};
+
+/*----------------------------------------------------------------------------*/
+/*----------------------------------------------------------------------------*/
+static void joypad_gpio_check(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+	int nbtn, value;
+
+	for (nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+
+		if (gpio_get_value_cansleep(gpio->num) < 0) {
+			dev_err(joypad->dev, "failed to get gpio state\n");
+			continue;
+		}
+		value = gpio_get_value(gpio->num);
+		if (value != gpio->old_value) {
+			input_event(poll_dev->input,
+				gpio->report_type,
+				gpio->linux_code,
+				(value == gpio->active_level) ? 1 : 0);
+			gpio->old_value = value;
+		}
+	}
+	input_sync(poll_dev->input);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_adc_check(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+	int nbtn;
+
+	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		adc->value = joypad_adc_read(joypad->amux, adc);
+		if (!adc->value) {
+			//dev_err(joypad->dev, "%s : saradc channels[%d]! adc->value : %d\n",__func__, nbtn, adc->value);
+			continue;
+		}
+		adc->value = adc->value - adc->cal;
+
+		/* Joystick Deadzone check */
+		if (joypad->bt_adc_deadzone) {
+			if (abs(adc->value) < joypad->bt_adc_deadzone)
+				adc->value = 0;
+		}
+
+		/* adc data tuning */
+		if (adc->tuning_n && adc->value < 0)
+			adc->value = ADC_DATA_TUNING(adc->value, adc->tuning_n);
+		if (adc->tuning_p && adc->value > 0)
+			adc->value = ADC_DATA_TUNING(adc->value, adc->tuning_p);
+
+		adc->value = adc->value > adc->max ? adc->max : adc->value;
+		adc->value = adc->value < adc->min ? adc->min : adc->value;
+
+		input_report_abs(poll_dev->input,
+			adc->report_type,
+			adc->invert ? adc->value * (-1) : adc->value);
+	}
+	input_sync(poll_dev->input);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_poll(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+
+	if (joypad->enable) {
+		joypad_adc_check(poll_dev);
+		joypad_gpio_check(poll_dev);
+	}
+	if (poll_dev->poll_interval != joypad->poll_interval) {
+		mutex_lock(&joypad->lock);
+		poll_dev->poll_interval = joypad->poll_interval;
+		mutex_unlock(&joypad->lock);
+	}
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_open(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+	int nbtn;
+
+	for (nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+		gpio->old_value = gpio->active_level ? 0 : 1;
+	}
+	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		adc->value = joypad_adc_read(joypad->amux, adc);
+		if (!adc->value) {
+			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				__func__, nbtn);
+			continue;
+		}
+		adc->cal = adc->value;
+		dev_info(joypad->dev, "%s : adc[%d] adc->cal = %d\n",
+			__func__, nbtn, adc->cal);
+	}
+	/* buttons status sync */
+	joypad_adc_check(poll_dev);
+	joypad_gpio_check(poll_dev);
+
+	/* button report enable */
+	mutex_lock(&joypad->lock);
+	joypad->enable = true;
+	mutex_unlock(&joypad->lock);
+
+	dev_info(joypad->dev, "%s : opened\n", __func__);
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_close(struct input_polled_dev *poll_dev)
+{
+	struct joypad *joypad = poll_dev->private;
+
+	/* button report disable */
+	mutex_lock(&joypad->lock);
+	joypad->enable = false;
+	mutex_unlock(&joypad->lock);
+
+	dev_info(joypad->dev, "%s : closed\n", __func__);
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
+{
+	struct analog_mux *amux;
+	enum iio_chan_type type;
+	enum of_gpio_flags flags;
+	int ret;
+
+	/* analog mux control struct init */
+	joypad->amux = devm_kzalloc(dev, sizeof(struct analog_mux),
+					GFP_KERNEL);
+	if (!joypad->amux) {
+		dev_err(dev, "%s amux devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+	amux = joypad->amux;
+	amux->iio_ch = devm_iio_channel_get(dev, "amux_adc");
+	if (PTR_ERR(amux->iio_ch) == -EPROBE_DEFER)
+		return -EPROBE_DEFER;
+	if (IS_ERR(amux->iio_ch)) {
+		dev_err(dev, "iio channel get error\n");
+		return -EINVAL;
+	}
+	if (!amux->iio_ch->indio_dev)
+		return -ENXIO;
+
+	if (iio_get_channel_type(amux->iio_ch, &type))
+		return -EINVAL;
+
+	if (type != IIO_VOLTAGE) {
+		dev_err(dev, "Incompatible channel type %d\n", type);
+		return -EINVAL;
+	}
+
+	amux->sel_a_gpio = of_get_named_gpio_flags(dev->of_node,
+				"amux-a-gpios", 0, &flags);
+	if (gpio_is_valid(amux->sel_a_gpio)) {
+		ret = devm_gpio_request(dev, amux->sel_a_gpio, "amux-sel-a");
+		if (ret < 0) {
+			dev_err(dev, "%s : failed to request amux-sel-a %d\n",
+				__func__, amux->sel_a_gpio);
+			goto err_out;
+		}
+		ret = gpio_direction_output(amux->sel_a_gpio, 0);
+		if (ret < 0)
+			goto err_out;
+	}
+
+	amux->sel_b_gpio = of_get_named_gpio_flags(dev->of_node,
+				"amux-b-gpios", 0, &flags);
+	if (gpio_is_valid(amux->sel_b_gpio)) {
+		ret = devm_gpio_request(dev, amux->sel_b_gpio, "amux-sel-b");
+		if (ret < 0) {
+			dev_err(dev, "%s : failed to request amux-sel-b %d\n",
+				__func__, amux->sel_b_gpio);
+			goto err_out;
+		}
+		ret = gpio_direction_output(amux->sel_b_gpio, 0);
+		if (ret < 0)
+			goto err_out;
+	}
+
+	amux->en_gpio = of_get_named_gpio_flags(dev->of_node,
+				"amux-en-gpios", 0, &flags);
+	if (gpio_is_valid(amux->en_gpio)) {
+		ret = devm_gpio_request(dev, amux->en_gpio, "amux-en");
+		if (ret < 0) {
+			dev_err(dev, "%s : failed to request amux-en %d\n",
+				__func__, amux->en_gpio);
+			goto err_out;
+		}
+		ret = gpio_direction_output(amux->en_gpio, 0);
+		if (ret < 0)
+			goto err_out;
+	}
+	return	0;
+err_out:
+	return ret;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
+{
+	int nbtn;
+
+	/* adc button struct init */
+	joypad->adcs = devm_kzalloc(dev, joypad->amux_count *
+				sizeof(struct bt_adc), GFP_KERNEL);
+	if (!joypad->adcs) {
+		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+
+	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+
+		adc->scale = joypad->bt_adc_scale;
+		
+		adc->max = (ADC_MAX_VOLTAGE / 2);
+		adc->min = (ADC_MAX_VOLTAGE / 2) * (-1);
+		if (adc->scale) {
+			adc->max *= adc->scale;
+			adc->min *= adc->scale;
+		}
+		adc->amux_ch = nbtn;
+		adc->invert = false;
+
+		switch (nbtn) {
+			case 0:
+				adc->report_type = ABS_RY;
+				if (device_property_read_u32(dev,
+					"abs_ry-p-tuning",
+					&adc->tuning_p))
+					adc->tuning_p = ADC_TUNING_DEFAULT;
+				if (device_property_read_u32(dev,
+					"abs_ry-n-tuning",
+					&adc->tuning_n))
+					adc->tuning_n = ADC_TUNING_DEFAULT;
+				break;
+			case 1:
+				adc->report_type = ABS_RX;
+				if (device_property_read_u32(dev,
+					"abs_rx-p-tuning",
+					&adc->tuning_p))
+					adc->tuning_p = ADC_TUNING_DEFAULT;
+				if (device_property_read_u32(dev,
+					"abs_rx-n-tuning",
+					&adc->tuning_n))
+					adc->tuning_n = ADC_TUNING_DEFAULT;
+				break;
+			case 2:
+			#ifdef __LEFT_JOYSTICK_INVERT__
+				adc->invert = true;	
+			#endif
+				adc->report_type = ABS_Y;
+				if (device_property_read_u32(dev,
+					"abs_y-p-tuning",
+					&adc->tuning_p))
+					adc->tuning_p = ADC_TUNING_DEFAULT;
+				if (device_property_read_u32(dev,
+					"abs_y-n-tuning",
+					&adc->tuning_n))
+					adc->tuning_n = ADC_TUNING_DEFAULT;
+				break;
+			case 3:
+			#ifdef __LEFT_JOYSTICK_INVERT__
+				adc->invert = true;	
+			#endif
+				adc->report_type = ABS_X;
+				if (device_property_read_u32(dev,
+					"abs_x-p-tuning",
+					&adc->tuning_p))
+					adc->tuning_p = ADC_TUNING_DEFAULT;
+				if (device_property_read_u32(dev,
+					"abs_x-n-tuning",
+					&adc->tuning_n))
+					adc->tuning_n = ADC_TUNING_DEFAULT;
+				break;
+			default :
+				dev_err(dev, "%s amux count(%d) error!",
+					__func__, nbtn);
+				return -EINVAL;
+		}
+	}
+	return	0;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
+{
+	struct device_node *node, *pp;
+	int nbtn;
+
+	node = dev->of_node;
+	if (!node)
+		return -ENODEV;
+
+	joypad->gpios = devm_kzalloc(dev, joypad->bt_gpio_count *
+				sizeof(struct bt_gpio), GFP_KERNEL);
+
+	if (!joypad->gpios) {
+		dev_err(dev, "%s devm_kzmalloc error!", __func__);
+		return -ENOMEM;
+	}
+
+	nbtn = 0;
+	for_each_child_of_node(node, pp) {
+		enum of_gpio_flags flags;
+		struct bt_gpio *gpio = &joypad->gpios[nbtn++];
+		int error;
+
+		gpio->num = of_get_gpio_flags(pp, 0, &flags);
+		if (gpio->num < 0) {
+			error = gpio->num;
+			dev_err(dev, "Failed to get gpio flags, error: %d\n",
+				error);
+			return error;
+		}
+
+		/* gpio active level(key press level) */
+		gpio->active_level = (flags & OF_GPIO_ACTIVE_LOW) ? 0 : 1;
+
+		gpio->label = of_get_property(pp, "label", NULL);
+
+		if (gpio_is_valid(gpio->num)) {
+			error = devm_gpio_request_one(dev, gpio->num,
+						      GPIOF_IN, gpio->label);
+			if (error < 0) {
+				dev_err(dev,
+					"Failed to request GPIO %d, error %d\n",
+					gpio->num, error);
+				return error;
+			}
+		}
+		if (of_property_read_u32(pp, "linux,code", &gpio->linux_code)) {
+			dev_err(dev, "Button without keycode: 0x%x\n",
+				gpio->num);
+			return -EINVAL;
+		}
+		if (of_property_read_u32(pp, "linux,input-type",
+				&gpio->report_type))
+			gpio->report_type = EV_KEY;
+	}
+	if (nbtn == 0)
+		return -EINVAL;
+
+	return	0;
+}
+
+/*----------------------------------------------------------------------------*/
+struct input_dev * joypad_input_g;
+
+
+void rk_send_key_f_key_up(void)
+{
+	if (!joypad_input_g)
+		return;
+
+	input_report_key(joypad_input_g, BTN_MODE, 1);
+	input_sync(joypad_input_g);
+}
+EXPORT_SYMBOL(rk_send_key_f_key_up);
+
+
+void rk_send_key_f_key_down(void)
+{
+	if (!joypad_input_g)
+		return;
+
+	input_report_key(joypad_input_g, BTN_MODE, 0);
+	input_sync(joypad_input_g);
+}
+EXPORT_SYMBOL(rk_send_key_f_key_down);
+
+
+static int joypad_input_setup(struct device *dev, struct joypad *joypad)
+{
+	struct input_polled_dev *poll_dev;
+	struct input_dev *input;
+	int nbtn, error;
+	u32 joypad_revision = 0;
+	u32 joypad_product = 0;
+
+	poll_dev = devm_input_allocate_polled_device(dev);
+	if (!poll_dev) {
+		dev_err(dev, "no memory for polled device\n");
+		return -ENOMEM;
+	}
+
+	poll_dev->private	= joypad;
+	poll_dev->poll		= joypad_poll;
+	poll_dev->poll_interval	= joypad->poll_interval;
+	poll_dev->open		= joypad_open;
+	poll_dev->close		= joypad_close;
+
+	input = poll_dev->input;
+	joypad_input_g=input;
+
+	device_property_read_string(dev, "joypad-name", &input->name);
+	input->phys = DRV_NAME"/input0";
+
+	device_property_read_u32(dev, "joypad-revision", &joypad_revision);
+	device_property_read_u32(dev, "joypad-product", &joypad_product);
+	input->id.bustype = BUS_HOST;
+	input->id.vendor  = 0x484B;
+	input->id.product = (u16)joypad_product;
+	input->id.version = (u16)joypad_revision;
+
+	/* IIO ADC key setup (0 mv ~ 1800 mv) * adc->scale */
+	__set_bit(EV_ABS, input->evbit);
+	for(nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+		struct bt_adc *adc = &joypad->adcs[nbtn];
+		input_set_abs_params(input, adc->report_type,
+				adc->min, adc->max,
+				joypad->bt_adc_fuzz,
+				joypad->bt_adc_flat);
+		dev_info(dev,
+			"%s : SCALE = %d, ABS min = %d, max = %d,"
+			" fuzz = %d, flat = %d, deadzone = %d\n",
+			__func__, adc->scale, adc->min, adc->max,
+			joypad->bt_adc_fuzz, joypad->bt_adc_flat,
+			joypad->bt_adc_deadzone);
+		dev_info(dev,
+			"%s : adc tuning_p = %d, adc_tuning_n = %d\n\n",
+			__func__, adc->tuning_p, adc->tuning_n);
+	}
+
+	/* GPIO key setup */
+	__set_bit(EV_KEY, input->evbit);
+	for(nbtn = 0; nbtn < joypad->bt_gpio_count; nbtn++) {
+		struct bt_gpio *gpio = &joypad->gpios[nbtn];
+		input_set_capability(input, gpio->report_type,
+				gpio->linux_code);
+	}
+
+	if (joypad->auto_repeat)
+		__set_bit(EV_REP, input->evbit);
+
+	joypad->dev = dev;
+
+	error = input_register_polled_device(poll_dev);
+	if (error) {
+		dev_err(dev, "unable to register polled device, err=%d\n",
+			error);
+		return error;
+	}
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static void joypad_setup_value_check(struct device *dev, struct joypad *joypad)
+{
+	/*
+		fuzz: specifies fuzz value that is used to filter noise from
+			the event stream.
+	*/
+	if (g_button_adc_fuzz)
+		joypad->bt_adc_fuzz = g_button_adc_fuzz;
+	else
+		device_property_read_u32(dev, "button-adc-fuzz",
+					&joypad->bt_adc_fuzz);
+	/*
+		flat: values that are within this value will be discarded by
+			joydev interface and reported as 0 instead.
+	*/
+	if (g_button_adc_flat)
+		joypad->bt_adc_flat = g_button_adc_flat;
+	else
+		device_property_read_u32(dev, "button-adc-flat",
+					&joypad->bt_adc_flat);
+
+	/* Joystick report value control */
+	if (g_button_adc_scale)
+		joypad->bt_adc_scale = g_button_adc_scale;
+	else
+		device_property_read_u32(dev, "button-adc-scale",
+					&joypad->bt_adc_scale);
+
+	/* Joystick deadzone value control */
+	if (g_button_adc_deadzone)
+		joypad->bt_adc_deadzone = g_button_adc_deadzone;
+	else
+		device_property_read_u32(dev, "button-adc-deadzone",
+					&joypad->bt_adc_deadzone);
+
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
+{
+	int error = 0;
+
+	/* initialize value check from boot.ini */
+	joypad_setup_value_check(dev, joypad);
+
+	device_property_read_u32(dev, "amux-count",
+				&joypad->amux_count);
+
+	device_property_read_u32(dev, "poll-interval",
+				&joypad->poll_interval);
+
+	joypad->auto_repeat = device_property_present(dev, "autorepeat");
+
+	joypad->bt_gpio_count = device_get_child_node_count(dev);
+
+	if ((joypad->amux_count == 0) || (joypad->bt_gpio_count == 0)) {
+		dev_err(dev, "adc key = %d, gpio key = %d error!",
+			joypad->amux_count, joypad->bt_gpio_count);
+		return -EINVAL;
+	}
+
+	error = joypad_adc_setup(dev, joypad);
+	if (error)
+		return error;
+
+	error = joypad_amux_setup(dev, joypad);
+	if (error)
+		return error;
+
+	error = joypad_gpio_setup(dev, joypad);
+	if (error)
+		return error;
+
+	dev_info(dev, "%s : adc key cnt = %d, gpio key cnt = %d\n",
+			__func__, joypad->amux_count, joypad->bt_gpio_count);
+
+	return error;
+}
+
+/*----------------------------------------------------------------------------*/
+static int joypad_probe(struct platform_device *pdev)
+{
+	struct joypad *joypad;
+	struct device *dev = &pdev->dev;
+	int error;
+
+	joypad = devm_kzalloc(dev, sizeof(struct joypad), GFP_KERNEL);
+	if (!joypad) {
+		dev_err(dev, "joypad devm_kzmalloc error!");
+		return -ENOMEM;
+	}
+
+	/* device tree data parse */
+	error = joypad_dt_parse(dev, joypad);
+	if (error) {
+		dev_err(dev, "dt parse error!(err = %d)\n", error);
+		return error;
+	}
+
+	mutex_init(&joypad->lock);
+	platform_set_drvdata(pdev, joypad);
+
+	error = sysfs_create_group(&pdev->dev.kobj, &joypad_attr_group);
+	if (error) {
+		dev_err(dev, "create sysfs group fail, error: %d\n",
+			error);
+		return error;
+	}
+
+	/* poll input device setup */
+	error = joypad_input_setup(dev, joypad);
+	if (error) {
+		dev_err(dev, "input setup failed!(err = %d)\n", error);
+		return error;
+	}
+	dev_info(dev, "%s : probe success\n", __func__);
+	return 0;
+}
+
+/*----------------------------------------------------------------------------*/
+static const struct of_device_id joypad_of_match[] = {
+	{ .compatible = "singleadc-joypad", },
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, joypad_of_match);
+
+/*----------------------------------------------------------------------------*/
+static struct platform_driver joypad_driver = {
+	.probe = joypad_probe,
+	.driver = {
+		.name = DRV_NAME,
+		.of_match_table = of_match_ptr(joypad_of_match),
+	},
+};
+
+/*----------------------------------------------------------------------------*/
+static int __init joypad_init(void)
+{
+	return platform_driver_register(&joypad_driver);
+}
+
+/*----------------------------------------------------------------------------*/
+static void __exit joypad_exit(void)
+{
+	platform_driver_unregister(&joypad_driver);
+}
+
+/*----------------------------------------------------------------------------*/
+late_initcall(joypad_init);
+module_exit(joypad_exit);
-- 
2.34.1


From 630503c2f1868970c00459f382576e2cd6e42565 Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Tue, 2 Apr 2024 04:19:59 +0400
Subject: [PATCH 2/7] drivers: input: joystick: yoink from odroidgo2-joypad.c

* https://github.com/SummerSunGenius/RG351V_kernel/blob/master/drivers/input/joystick/odroidgo2-joypad.c
---
 .../input/joystick/singleadc_quadsaradc_joy.c | 470 +++++-------------
 1 file changed, 136 insertions(+), 334 deletions(-)

diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
index f8e7f04c2..bca08a4c0 100644
--- a/drivers/input/joystick/singleadc_quadsaradc_joy.c
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -5,7 +5,7 @@
  */
 
 /*
- * Single SARADC dual-joystick gamepad driver
+ * Quad SARADC dual-joystick gamepad driver
  */
 
 /*----------------------------------------------------------------------------*/
@@ -27,16 +27,14 @@
 
 /*----------------------------------------------------------------------------*/
 #define DRV_NAME "retrogame_joypad"
-#define __LEFT_JOYSTICK_INVERT__
 #define __MURMUR__
 /*----------------------------------------------------------------------------*/
-#define	ADC_MAX_VOLTAGE		1800
-#define	ADC_DATA_TUNING(x, p)	((x * p) / 100)
-#define	ADC_TUNING_DEFAULT	180
 
 struct bt_adc {
+	/* IIO ADC Channel */
+	struct iio_channel *channel;
 	/* report value (mV) */
-	int value;
+	int old_value;
 	/* report type */
 	int report_type;
 	/* input device init value (mV) */
@@ -47,19 +45,6 @@ struct bt_adc {
 	int scale;
 	/* invert report */
 	bool invert;
-	/* amux channel */
-	int amux_ch;
-	/* adc data tuning value([percent), p = positive, n = negative */
-	int tuning_p, tuning_n;
-};
-
-struct analog_mux {
-	/* IIO ADC Channel : amux connect channel */
-	struct iio_channel *iio_ch;
-	/* analog mux select(a,b) gpio */
-	int sel_a_gpio, sel_b_gpio;
-	/* analog mux enable gpio */
-	int en_gpio;
 };
 
 struct bt_gpio {
@@ -84,31 +69,27 @@ struct joypad {
 	/* report enable/disable */
 	bool enable;
 
-	/* analog mux & joystick control */
-	struct analog_mux *amux;
-	/* analog mux max count */
-	int amux_count;
-	/* analog button */
-	struct bt_adc *adcs;
+	/* report reference point */
+	bool invert_absx;
+	bool invert_absy;
 
 	/* report interval (ms) */
 	int bt_gpio_count;
 	struct bt_gpio *gpios;
-
 	/* button auto repeat */
 	int auto_repeat;
 
 	/* report threshold (mV) */
 	int bt_adc_fuzz, bt_adc_flat;
+	int bt_adc_x_range, bt_adc_y_range;
 	/* adc read value scale */
 	int bt_adc_scale;
 	/* joystick deadzone control */
 	int bt_adc_deadzone;
+	int bt_adc_count;
+	struct bt_adc *adcs;
 
 	struct mutex lock;
-
-	/* amux debug channel */
-	int debug_ch;
 };
 
 /*----------------------------------------------------------------------------*/
@@ -116,11 +97,35 @@ struct joypad {
 // set to the value in the boot.ini file. (if exist)
 //
 /*----------------------------------------------------------------------------*/
+static unsigned int g_button_adc_x_range = 0;
+static unsigned int g_button_adc_y_range = 0;
 static unsigned int g_button_adc_fuzz = 0;
 static unsigned int g_button_adc_flat = 0;
 static unsigned int g_button_adc_scale = 0;
 static unsigned int g_button_adc_deadzone = 0;
 
+static int __init button_adcx_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_x_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-x-range=", button_adcx_range_setup);
+
+static int __init button_adcy_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_y_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-y-range=", button_adcy_range_setup);
+
 static int button_adc_fuzz(char *str)
 {
 	if (!str)
@@ -159,55 +164,16 @@ __setup("button-adc-deadzone=", button_adc_deadzone);
 
 /*----------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------*/
-static int joypad_amux_select(struct analog_mux *amux, int channel)
-{
-	/* select mux channel */
-	gpio_set_value(amux->en_gpio, 0);
-
-	switch(channel) {
-		case 0:	/* EVENT (ABS_RY) */
-			gpio_set_value(amux->sel_a_gpio, 0);
-			gpio_set_value(amux->sel_b_gpio, 0);
-			break;
-		case 1:	/* EVENT (ABS_RX) */
-			gpio_set_value(amux->sel_a_gpio, 0);
-			gpio_set_value(amux->sel_b_gpio, 1);
-			break;
-		case 2:	/* EVENT (ABS_Y) */
-			gpio_set_value(amux->sel_a_gpio, 1);
-			gpio_set_value(amux->sel_b_gpio, 0);
-			break;
-		case 3:	/* EVENT (ABS_X) */
-			gpio_set_value(amux->sel_a_gpio, 1);
-			gpio_set_value(amux->sel_b_gpio, 1);
-			break;
-		default:
-			/* amux disanle */
-			gpio_set_value(amux->en_gpio, 1);
-			return -1;
-	}
-	/* mux swtiching speed : 35ns(on) / 9ns(off) */
-	usleep_range(10, 20);
-	return 0;
-}
-
-/*----------------------------------------------------------------------------*/
-static int joypad_adc_read(struct analog_mux *amux, struct bt_adc *adc)
+static int joypad_adc_read(struct bt_adc *adc)
 {
 	int value;
 
-
-	if (joypad_amux_select(amux, adc->amux_ch))
+	if (iio_read_channel_processed(adc->channel, &value))
 		return 0;
 
-	iio_read_channel_raw(amux->iio_ch, &value);
-
 	value *= adc->scale;
-#ifdef __LEFT_JOYSTICK_INVERT__
-	return value;
-#else
+
 	return (adc->invert ? (adc->max - value) : value);
-#endif
 }
 
 /*----------------------------------------------------------------------------*/
@@ -353,16 +319,16 @@ static ssize_t joypad_store_adc_cal(struct device *dev,
 		int nbtn;
 
 		mutex_lock(&joypad->lock);
-		for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+		for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
 			struct bt_adc *adc = &joypad->adcs[nbtn];
 
-			adc->value = joypad_adc_read(joypad->amux, adc);
-			if (!adc->value) {
+			adc->cal = joypad_adc_read(adc);
+			if (!adc->cal) {
 				dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
 					__func__, nbtn);
 				continue;
 			}
-			adc->cal = adc->value;
+			adc->old_value = adc->cal;
 		}
 		mutex_unlock(&joypad->lock);
 	}
@@ -379,12 +345,12 @@ static ssize_t joypad_show_adc_cal(struct device *dev,
 	int nbtn;
 	ssize_t pos;
 
-	for (nbtn = 0, pos = 0; nbtn < joypad->amux_count; nbtn++) {
+	for (nbtn = 0, pos = 0; nbtn < joypad->bt_adc_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
-		pos += sprintf(&buf[pos], "adc[%d]->cal = %d\n",
+		pos += sprintf(&buf[pos], "adc[%d]->cal = %d ",
 				nbtn, adc->cal);
 	}
-	pos += sprintf(&buf[pos], "adc scale = %d\n", joypad->bt_adc_scale);
+	pos += sprintf(&buf[pos], "\n");
 	return pos;
 }
 
@@ -393,73 +359,6 @@ static DEVICE_ATTR(adc_cal, S_IWUSR | S_IRUGO,
 		   joypad_show_adc_cal,
 		   joypad_store_adc_cal);
 
-/*----------------------------------------------------------------------------*/
-/*
- * ATTRIBUTES:
- *
- * /sys/devices/platform/retrogame_joypad/amux_debug [rw]
- *
- * echo [debug channel] > amux_debug
- * cat amux_debug : debug channel mux set & adc read
- */
-/*----------------------------------------------------------------------------*/
-static ssize_t joypad_store_amux_debug(struct device *dev,
-				      struct device_attribute *attr,
-				      const char *buf,
-				      size_t count)
-{
-	struct platform_device *pdev  = to_platform_device(dev);
-	struct joypad *joypad = platform_get_drvdata(pdev);
-
-	joypad->debug_ch = simple_strtoul(buf, NULL, 10);
-
-	/* if error than default setting(debug_ch = 0) */
-	if (joypad->debug_ch > joypad->amux_count)
-		joypad->debug_ch = 0;
-
-	return count;
-}
-
-/*----------------------------------------------------------------------------*/
-static ssize_t joypad_show_amux_debug(struct device *dev,
-				     struct device_attribute *attr,
-				     char *buf)
-{
-	struct platform_device *pdev  = to_platform_device(dev);
-	struct joypad *joypad = platform_get_drvdata(pdev);
-	struct analog_mux *amux = joypad->amux;
-	ssize_t pos;
-	int value;
-
-	mutex_lock(&joypad->lock);
-
-	/* disable poll driver */
-	if (joypad->enable)
-		joypad->enable = false;
-
-	if (joypad_amux_select(amux, joypad->debug_ch))
-		goto err_out;
-
-	if (iio_read_channel_processed(amux->iio_ch, &value))
-		goto err_out;
-
-	pos = sprintf(buf, "amux ch[%d], adc scale = %d, adc value = %d\n",
-			joypad->debug_ch, joypad->bt_adc_scale,
-			value * joypad->bt_adc_scale);
-	goto out;
-
-err_out:
-	pos = sprintf(buf, "error : amux setup & adc read!\n");
-out:
-	mutex_unlock(&joypad->lock);
-	return pos;
-}
-
-/*----------------------------------------------------------------------------*/
-static DEVICE_ATTR(amux_debug, S_IWUSR | S_IRUGO,
-		   joypad_show_amux_debug,
-		   joypad_store_amux_debug);
-
 /*----------------------------------------------------------------------------*/
 /*----------------------------------------------------------------------------*/
 static struct attribute *joypad_attrs[] = {
@@ -468,7 +367,6 @@ static struct attribute *joypad_attrs[] = {
 	&dev_attr_adc_flat.attr,
 	&dev_attr_enable.attr,
 	&dev_attr_adc_cal.attr,
-	&dev_attr_amux_debug.attr,
 	NULL,
 };
 
@@ -506,36 +404,40 @@ static void joypad_gpio_check(struct input_polled_dev *poll_dev)
 static void joypad_adc_check(struct input_polled_dev *poll_dev)
 {
 	struct joypad *joypad = poll_dev->private;
-	int nbtn;
+	int nbtn, value;
 
-	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
 
-		adc->value = joypad_adc_read(joypad->amux, adc);
-		if (!adc->value) {
-			//dev_err(joypad->dev, "%s : saradc channels[%d]! adc->value : %d\n",__func__, nbtn, adc->value);
+		value = joypad_adc_read(adc);
+		if (!value) {
+			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
+				__func__, nbtn);
 			continue;
 		}
-		adc->value = adc->value - adc->cal;
 
 		/* Joystick Deadzone check */
 		if (joypad->bt_adc_deadzone) {
-			if (abs(adc->value) < joypad->bt_adc_deadzone)
-				adc->value = 0;
+			if ((value < adc->cal + joypad->bt_adc_deadzone) &&
+			    (value > adc->cal - joypad->bt_adc_deadzone))
+				value = adc->cal;
 		}
-
-		/* adc data tuning */
-		if (adc->tuning_n && adc->value < 0)
-			adc->value = ADC_DATA_TUNING(adc->value, adc->tuning_n);
-		if (adc->tuning_p && adc->value > 0)
-			adc->value = ADC_DATA_TUNING(adc->value, adc->tuning_p);
-
-		adc->value = adc->value > adc->max ? adc->max : adc->value;
-		adc->value = adc->value < adc->min ? adc->min : adc->value;
-
-		input_report_abs(poll_dev->input,
-			adc->report_type,
-			adc->invert ? adc->value * (-1) : adc->value);
+		value = value - adc->cal;
+		value = value > adc->max ? adc->max : value;
+		value = value < adc->min ? adc->min : value;
+
+		if (nbtn == 0)
+		{
+			// adc-x value is default inverted(h/w)
+			input_report_abs(poll_dev->input,
+				adc->report_type, value * (-1));
+		}
+		else
+		{
+			input_report_abs(poll_dev->input,
+				adc->report_type, value);
+		}
+		adc->old_value = value;
 	}
 	input_sync(poll_dev->input);
 }
@@ -566,16 +468,16 @@ static void joypad_open(struct input_polled_dev *poll_dev)
 		struct bt_gpio *gpio = &joypad->gpios[nbtn];
 		gpio->old_value = gpio->active_level ? 0 : 1;
 	}
-	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
 
-		adc->value = joypad_adc_read(joypad->amux, adc);
-		if (!adc->value) {
+		adc->old_value = joypad_adc_read(adc);
+		if (!adc->old_value) {
 			dev_err(joypad->dev, "%s : saradc channels[%d]!\n",
 				__func__, nbtn);
 			continue;
 		}
-		adc->cal = adc->value;
+		adc->cal = adc->old_value;
 		dev_info(joypad->dev, "%s : adc[%d] adc->cal = %d\n",
 			__func__, nbtn, adc->cal);
 	}
@@ -604,170 +506,64 @@ static void joypad_close(struct input_polled_dev *poll_dev)
 	dev_info(joypad->dev, "%s : closed\n", __func__);
 }
 
-/*----------------------------------------------------------------------------*/
-static int joypad_amux_setup(struct device *dev, struct joypad *joypad)
-{
-	struct analog_mux *amux;
-	enum iio_chan_type type;
-	enum of_gpio_flags flags;
-	int ret;
-
-	/* analog mux control struct init */
-	joypad->amux = devm_kzalloc(dev, sizeof(struct analog_mux),
-					GFP_KERNEL);
-	if (!joypad->amux) {
-		dev_err(dev, "%s amux devm_kzmalloc error!", __func__);
-		return -ENOMEM;
-	}
-	amux = joypad->amux;
-	amux->iio_ch = devm_iio_channel_get(dev, "amux_adc");
-	if (PTR_ERR(amux->iio_ch) == -EPROBE_DEFER)
-		return -EPROBE_DEFER;
-	if (IS_ERR(amux->iio_ch)) {
-		dev_err(dev, "iio channel get error\n");
-		return -EINVAL;
-	}
-	if (!amux->iio_ch->indio_dev)
-		return -ENXIO;
-
-	if (iio_get_channel_type(amux->iio_ch, &type))
-		return -EINVAL;
-
-	if (type != IIO_VOLTAGE) {
-		dev_err(dev, "Incompatible channel type %d\n", type);
-		return -EINVAL;
-	}
-
-	amux->sel_a_gpio = of_get_named_gpio_flags(dev->of_node,
-				"amux-a-gpios", 0, &flags);
-	if (gpio_is_valid(amux->sel_a_gpio)) {
-		ret = devm_gpio_request(dev, amux->sel_a_gpio, "amux-sel-a");
-		if (ret < 0) {
-			dev_err(dev, "%s : failed to request amux-sel-a %d\n",
-				__func__, amux->sel_a_gpio);
-			goto err_out;
-		}
-		ret = gpio_direction_output(amux->sel_a_gpio, 0);
-		if (ret < 0)
-			goto err_out;
-	}
-
-	amux->sel_b_gpio = of_get_named_gpio_flags(dev->of_node,
-				"amux-b-gpios", 0, &flags);
-	if (gpio_is_valid(amux->sel_b_gpio)) {
-		ret = devm_gpio_request(dev, amux->sel_b_gpio, "amux-sel-b");
-		if (ret < 0) {
-			dev_err(dev, "%s : failed to request amux-sel-b %d\n",
-				__func__, amux->sel_b_gpio);
-			goto err_out;
-		}
-		ret = gpio_direction_output(amux->sel_b_gpio, 0);
-		if (ret < 0)
-			goto err_out;
-	}
-
-	amux->en_gpio = of_get_named_gpio_flags(dev->of_node,
-				"amux-en-gpios", 0, &flags);
-	if (gpio_is_valid(amux->en_gpio)) {
-		ret = devm_gpio_request(dev, amux->en_gpio, "amux-en");
-		if (ret < 0) {
-			dev_err(dev, "%s : failed to request amux-en %d\n",
-				__func__, amux->en_gpio);
-			goto err_out;
-		}
-		ret = gpio_direction_output(amux->en_gpio, 0);
-		if (ret < 0)
-			goto err_out;
-	}
-	return	0;
-err_out:
-	return ret;
-}
-
 /*----------------------------------------------------------------------------*/
 static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 {
-	int nbtn;
+	int nbtn = 0;
 
-	/* adc button struct init */
-	joypad->adcs = devm_kzalloc(dev, joypad->amux_count *
+	joypad->adcs = devm_kzalloc(dev, joypad->bt_adc_count *
 				sizeof(struct bt_adc), GFP_KERNEL);
+
 	if (!joypad->adcs) {
 		dev_err(dev, "%s devm_kzmalloc error!", __func__);
 		return -ENOMEM;
 	}
 
-	for (nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+	for (nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
+		enum iio_chan_type type;
 
 		adc->scale = joypad->bt_adc_scale;
-		
-		adc->max = (ADC_MAX_VOLTAGE / 2);
-		adc->min = (ADC_MAX_VOLTAGE / 2) * (-1);
-		if (adc->scale) {
-			adc->max *= adc->scale;
-			adc->min *= adc->scale;
+		if (nbtn) {
+			adc->channel =
+				devm_iio_channel_get(dev, "joy_y");
+			adc->report_type = ABS_Y;
+			if (joypad->invert_absy)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_y_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_y_range / 2);
 		}
-		adc->amux_ch = nbtn;
-		adc->invert = false;
-
-		switch (nbtn) {
-			case 0:
-				adc->report_type = ABS_RY;
-				if (device_property_read_u32(dev,
-					"abs_ry-p-tuning",
-					&adc->tuning_p))
-					adc->tuning_p = ADC_TUNING_DEFAULT;
-				if (device_property_read_u32(dev,
-					"abs_ry-n-tuning",
-					&adc->tuning_n))
-					adc->tuning_n = ADC_TUNING_DEFAULT;
-				break;
-			case 1:
-				adc->report_type = ABS_RX;
-				if (device_property_read_u32(dev,
-					"abs_rx-p-tuning",
-					&adc->tuning_p))
-					adc->tuning_p = ADC_TUNING_DEFAULT;
-				if (device_property_read_u32(dev,
-					"abs_rx-n-tuning",
-					&adc->tuning_n))
-					adc->tuning_n = ADC_TUNING_DEFAULT;
-				break;
-			case 2:
-			#ifdef __LEFT_JOYSTICK_INVERT__
-				adc->invert = true;	
-			#endif
-				adc->report_type = ABS_Y;
-				if (device_property_read_u32(dev,
-					"abs_y-p-tuning",
-					&adc->tuning_p))
-					adc->tuning_p = ADC_TUNING_DEFAULT;
-				if (device_property_read_u32(dev,
-					"abs_y-n-tuning",
-					&adc->tuning_n))
-					adc->tuning_n = ADC_TUNING_DEFAULT;
-				break;
-			case 3:
-			#ifdef __LEFT_JOYSTICK_INVERT__
-				adc->invert = true;	
-			#endif
-				adc->report_type = ABS_X;
-				if (device_property_read_u32(dev,
-					"abs_x-p-tuning",
-					&adc->tuning_p))
-					adc->tuning_p = ADC_TUNING_DEFAULT;
-				if (device_property_read_u32(dev,
-					"abs_x-n-tuning",
-					&adc->tuning_n))
-					adc->tuning_n = ADC_TUNING_DEFAULT;
-				break;
-			default :
-				dev_err(dev, "%s amux count(%d) error!",
-					__func__, nbtn);
-				return -EINVAL;
+		else {
+			adc->channel =
+				devm_iio_channel_get(dev, "joy_x");
+			adc->report_type = ABS_X;
+			if (joypad->invert_absx)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_x_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_x_range / 2);
+		}
+
+		if (IS_ERR(adc->channel)) {
+			dev_err(dev, "iio channel[%d] get error\n", nbtn);
+			return -EINVAL;
+		}
+		if (!adc->channel->indio_dev)
+			return -ENXIO;
+
+		if (iio_get_channel_type(adc->channel, &type))
+			return -EINVAL;
+
+		if (type != IIO_VOLTAGE) {
+			dev_err(dev, "Incompatible channel %d type %d\n",
+				nbtn, type);
+			return -EINVAL;
 		}
 	}
+	if (nbtn == 0)
+		return -EINVAL;
+
 	return	0;
 }
 
@@ -894,7 +690,7 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 
 	/* IIO ADC key setup (0 mv ~ 1800 mv) * adc->scale */
 	__set_bit(EV_ABS, input->evbit);
-	for(nbtn = 0; nbtn < joypad->amux_count; nbtn++) {
+	for(nbtn = 0; nbtn < joypad->bt_adc_count; nbtn++) {
 		struct bt_adc *adc = &joypad->adcs[nbtn];
 		input_set_abs_params(input, adc->report_type,
 				adc->min, adc->max,
@@ -906,9 +702,6 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 			__func__, adc->scale, adc->min, adc->max,
 			joypad->bt_adc_fuzz, joypad->bt_adc_flat,
 			joypad->bt_adc_deadzone);
-		dev_info(dev,
-			"%s : adc tuning_p = %d, adc_tuning_n = %d\n\n",
-			__func__, adc->tuning_p, adc->tuning_n);
 	}
 
 	/* GPIO key setup */
@@ -969,6 +762,16 @@ static void joypad_setup_value_check(struct device *dev, struct joypad *joypad)
 		device_property_read_u32(dev, "button-adc-deadzone",
 					&joypad->bt_adc_deadzone);
 
+	if (g_button_adc_x_range)
+		joypad->bt_adc_x_range = g_button_adc_x_range;
+	else
+		device_property_read_u32(dev, "button-adc-x-range",
+					&joypad->bt_adc_x_range);
+	if (g_button_adc_y_range)
+		joypad->bt_adc_y_range = g_button_adc_y_range;
+	else
+		device_property_read_u32(dev, "button-adc-y-range",
+					&joypad->bt_adc_y_range);
 }
 
 /*----------------------------------------------------------------------------*/
@@ -979,19 +782,25 @@ static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
 	/* initialize value check from boot.ini */
 	joypad_setup_value_check(dev, joypad);
 
-	device_property_read_u32(dev, "amux-count",
-				&joypad->amux_count);
+	device_property_read_u32(dev, "button-adc-count",
+				&joypad->bt_adc_count);
 
 	device_property_read_u32(dev, "poll-interval",
 				&joypad->poll_interval);
 
 	joypad->auto_repeat = device_property_present(dev, "autorepeat");
 
+	/* change the report reference point? (ADC MAX - read value) */
+	joypad->invert_absx = device_property_present(dev, "invert-absx");
+	joypad->invert_absy = device_property_present(dev, "invert-absy");
+	dev_info(dev, "%s : invert-absx = %d, inveret-absy = %d\n",
+		__func__, joypad->invert_absx, joypad->invert_absy);
+
 	joypad->bt_gpio_count = device_get_child_node_count(dev);
 
-	if ((joypad->amux_count == 0) || (joypad->bt_gpio_count == 0)) {
+	if ((joypad->bt_adc_count == 0) || (joypad->bt_gpio_count == 0)) {
 		dev_err(dev, "adc key = %d, gpio key = %d error!",
-			joypad->amux_count, joypad->bt_gpio_count);
+			joypad->bt_adc_count, joypad->bt_gpio_count);
 		return -EINVAL;
 	}
 
@@ -999,17 +808,10 @@ static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
 	if (error)
 		return error;
 
-	error = joypad_amux_setup(dev, joypad);
-	if (error)
-		return error;
-
 	error = joypad_gpio_setup(dev, joypad);
 	if (error)
 		return error;
 
-	dev_info(dev, "%s : adc key cnt = %d, gpio key cnt = %d\n",
-			__func__, joypad->amux_count, joypad->bt_gpio_count);
-
 	return error;
 }
 
-- 
2.34.1


From bd92c3584e2aaea7b1f1767104b5b41933f45fe3 Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Tue, 2 Apr 2024 04:33:56 +0400
Subject: [PATCH 3/7] drivers: input: joystick: add all 4 channels

* From Stock X55 BSP :
saradc 0 - ABS_X <15 1023>;
saradc 1 - ABS_Y <1023 15>;
saradc 2 - ABS_RX <15 1023>;
saradc 3 - ABS_RY <1023 15>;
---
 .../input/joystick/singleadc_quadsaradc_joy.c | 79 ++++++++++++++++---
 1 file changed, 67 insertions(+), 12 deletions(-)

diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
index bca08a4c0..5e23df657 100644
--- a/drivers/input/joystick/singleadc_quadsaradc_joy.c
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -72,6 +72,8 @@ struct joypad {
 	/* report reference point */
 	bool invert_absx;
 	bool invert_absy;
+	bool invert_absrx;
+	bool invert_absry;
 
 	/* report interval (ms) */
 	int bt_gpio_count;
@@ -81,7 +83,7 @@ struct joypad {
 
 	/* report threshold (mV) */
 	int bt_adc_fuzz, bt_adc_flat;
-	int bt_adc_x_range, bt_adc_y_range;
+	int bt_adc_x_range, bt_adc_y_range, bt_adc_rx_range, bt_adc_ry_range;
 	/* adc read value scale */
 	int bt_adc_scale;
 	/* joystick deadzone control */
@@ -99,6 +101,8 @@ struct joypad {
 /*----------------------------------------------------------------------------*/
 static unsigned int g_button_adc_x_range = 0;
 static unsigned int g_button_adc_y_range = 0;
+static unsigned int g_button_adc_rx_range = 0;
+static unsigned int g_button_adc_ry_range = 0;
 static unsigned int g_button_adc_fuzz = 0;
 static unsigned int g_button_adc_flat = 0;
 static unsigned int g_button_adc_scale = 0;
@@ -126,6 +130,28 @@ static int __init button_adcy_range_setup(char *str)
 }
 __setup("button-adc-y-range=", button_adcy_range_setup);
 
+static int __init button_adcrx_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_rx_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-rx-range=", button_adcrx_range_setup);
+
+static int __init button_adcry_range_setup(char *str)
+{
+        if (!str)
+                return -EINVAL;
+
+	g_button_adc_ry_range = simple_strtoul(str, NULL, 10);
+
+        return 0;
+}
+__setup("button-adc-ry-range=", button_adcry_range_setup);
+
 static int button_adc_fuzz(char *str)
 {
 	if (!str)
@@ -524,9 +550,18 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 		enum iio_chan_type type;
 
 		adc->scale = joypad->bt_adc_scale;
-		if (nbtn) {
-			adc->channel =
-				devm_iio_channel_get(dev, "joy_y");
+
+		if (nbtn == 0) {
+			adc->channel = devm_iio_channel_get(dev, "ABS_X");
+			adc->report_type = ABS_X;
+			if (joypad->invert_absx)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_x_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_x_range / 2);
+		}
+		else if (nbtn == 1) {
+			adc->channel = devm_iio_channel_get(dev, "ABS_Y");
 			adc->report_type = ABS_Y;
 			if (joypad->invert_absy)
 				adc->invert = true;
@@ -534,15 +569,23 @@ static int joypad_adc_setup(struct device *dev, struct joypad *joypad)
 			adc->max =  (joypad->bt_adc_y_range / 2) - 1;
 			adc->min = -(joypad->bt_adc_y_range / 2);
 		}
+		else if (nbtn == 2) {
+			adc->channel = devm_iio_channel_get(dev, "ABS_RX");
+			adc->report_type = ABS_RX;
+			if (joypad->invert_absrx)
+				adc->invert = true;
+
+			adc->max =  (joypad->bt_adc_rx_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_rx_range / 2);
+		}
 		else {
-			adc->channel =
-				devm_iio_channel_get(dev, "joy_x");
-			adc->report_type = ABS_X;
-			if (joypad->invert_absx)
+			adc->channel = devm_iio_channel_get(dev, "ABS_RY");
+			adc->report_type = ABS_RY;
+			if (joypad->invert_absry)
 				adc->invert = true;
 
-			adc->max =  (joypad->bt_adc_x_range / 2) - 1;
-			adc->min = -(joypad->bt_adc_x_range / 2);
+			adc->max =  (joypad->bt_adc_ry_range / 2) - 1;
+			adc->min = -(joypad->bt_adc_ry_range / 2);
 		}
 
 		if (IS_ERR(adc->channel)) {
@@ -772,6 +815,16 @@ static void joypad_setup_value_check(struct device *dev, struct joypad *joypad)
 	else
 		device_property_read_u32(dev, "button-adc-y-range",
 					&joypad->bt_adc_y_range);
+	if (g_button_adc_rx_range)
+		joypad->bt_adc_rx_range = g_button_adc_rx_range;
+	else
+		device_property_read_u32(dev, "button-adc-rx-range",
+					&joypad->bt_adc_rx_range);
+	if (g_button_adc_ry_range)
+		joypad->bt_adc_ry_range = g_button_adc_ry_range;
+	else
+		device_property_read_u32(dev, "button-adc-ry-range",
+					&joypad->bt_adc_ry_range);
 }
 
 /*----------------------------------------------------------------------------*/
@@ -793,8 +846,10 @@ static int joypad_dt_parse(struct device *dev, struct joypad *joypad)
 	/* change the report reference point? (ADC MAX - read value) */
 	joypad->invert_absx = device_property_present(dev, "invert-absx");
 	joypad->invert_absy = device_property_present(dev, "invert-absy");
-	dev_info(dev, "%s : invert-absx = %d, inveret-absy = %d\n",
-		__func__, joypad->invert_absx, joypad->invert_absy);
+	joypad->invert_absrx = device_property_present(dev, "invert-absrx");
+	joypad->invert_absry = device_property_present(dev, "invert-absry");
+	dev_info(dev, "%s : invert-absx = %d, inveret-absy = %d\n, inveret-absrx = %d\n, inveret-absry = %d\n",
+		__func__, joypad->invert_absx, joypad->invert_absy, joypad->invert_absrx, joypad->invert_absry);
 
 	joypad->bt_gpio_count = device_get_child_node_count(dev);
 
-- 
2.34.1


From 26241d4bf8e17a96aa30dace7267519f85d5e83e Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Wed, 3 Apr 2024 00:31:14 +0400
Subject: [PATCH 4/7] drivers: input: joystick: dont invert X axis

---
 drivers/input/joystick/singleadc_quadsaradc_joy.c | 12 ++----------
 1 file changed, 2 insertions(+), 10 deletions(-)

diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
index 5e23df657..a13982375 100644
--- a/drivers/input/joystick/singleadc_quadsaradc_joy.c
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -452,17 +452,9 @@ static void joypad_adc_check(struct input_polled_dev *poll_dev)
 		value = value > adc->max ? adc->max : value;
 		value = value < adc->min ? adc->min : value;
 
-		if (nbtn == 0)
-		{
-			// adc-x value is default inverted(h/w)
-			input_report_abs(poll_dev->input,
-				adc->report_type, value * (-1));
-		}
-		else
-		{
-			input_report_abs(poll_dev->input,
+		input_report_abs(poll_dev->input,
 				adc->report_type, value);
-		}
+
 		adc->old_value = value;
 	}
 	input_sync(poll_dev->input);
-- 
2.34.1


From 7a18f03bc041db8ce7f2a8b84695fae98efa2fb4 Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Tue, 9 Apr 2024 19:52:31 +0400
Subject: [PATCH 5/7] drivers: input: singleadc: change device name

---
 drivers/input/joystick/singleadc_quadsaradc_joy.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
index a13982375..27af64a7d 100644
--- a/drivers/input/joystick/singleadc_quadsaradc_joy.c
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -904,7 +904,7 @@ static int joypad_probe(struct platform_device *pdev)
 
 /*----------------------------------------------------------------------------*/
 static const struct of_device_id joypad_of_match[] = {
-	{ .compatible = "singleadc-joypad", },
+	{ .compatible = "singleadc-joypad-x55", },
 	{},
 };
 
-- 
2.34.1


From 6071df09f533e9eaa82be8c283c025ce3ff0482f Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Tue, 9 Apr 2024 20:29:33 +0400
Subject: [PATCH 6/7] drivers: input: singleadc: fix definitions

---
 .../input/joystick/singleadc_quadsaradc_joy.c | 24 +++++++++----------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
index 27af64a7d..542da74d9 100644
--- a/drivers/input/joystick/singleadc_quadsaradc_joy.c
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -665,29 +665,29 @@ static int joypad_gpio_setup(struct device *dev, struct joypad *joypad)
 }
 
 /*----------------------------------------------------------------------------*/
-struct input_dev * joypad_input_g;
+struct input_dev * joypad_input_g_x55;
 
 
-void rk_send_key_f_key_up(void)
+void rk_send_key_f_key_up_x55(void)
 {
-	if (!joypad_input_g)
+	if (!joypad_input_g_x55)
 		return;
 
-	input_report_key(joypad_input_g, BTN_MODE, 1);
-	input_sync(joypad_input_g);
+	input_report_key(joypad_input_g_x55, BTN_MODE, 1);
+	input_sync(joypad_input_g_x55);
 }
-EXPORT_SYMBOL(rk_send_key_f_key_up);
+EXPORT_SYMBOL(rk_send_key_f_key_up_x55);
 
 
-void rk_send_key_f_key_down(void)
+void rk_send_key_f_key_down_x55(void)
 {
-	if (!joypad_input_g)
+	if (!joypad_input_g_x55)
 		return;
 
-	input_report_key(joypad_input_g, BTN_MODE, 0);
-	input_sync(joypad_input_g);
+	input_report_key(joypad_input_g_x55, BTN_MODE, 0);
+	input_sync(joypad_input_g_x55);
 }
-EXPORT_SYMBOL(rk_send_key_f_key_down);
+EXPORT_SYMBOL(rk_send_key_f_key_down_x55);
 
 
 static int joypad_input_setup(struct device *dev, struct joypad *joypad)
@@ -711,7 +711,7 @@ static int joypad_input_setup(struct device *dev, struct joypad *joypad)
 	poll_dev->close		= joypad_close;
 
 	input = poll_dev->input;
-	joypad_input_g=input;
+	joypad_input_g_x55=input;
 
 	device_property_read_string(dev, "joypad-name", &input->name);
 	input->phys = DRV_NAME"/input0";
-- 
2.34.1


From 02d9bf62d26a57408e9476d56e8ba8a8ea1a2cfe Mon Sep 17 00:00:00 2001
From: AnanJaser <ananjaser@gmail.com>
Date: Tue, 9 Apr 2024 21:18:30 +0400
Subject: [PATCH 7/7] drivers: input: singleadc: change DRV name

* Error: Driver 'retrogame_joypad' is already registered, aborting...
---
 drivers/input/joystick/singleadc_quadsaradc_joy.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/drivers/input/joystick/singleadc_quadsaradc_joy.c b/drivers/input/joystick/singleadc_quadsaradc_joy.c
index 542da74d9..67c9ade27 100644
--- a/drivers/input/joystick/singleadc_quadsaradc_joy.c
+++ b/drivers/input/joystick/singleadc_quadsaradc_joy.c
@@ -26,7 +26,7 @@
 #include <linux/delay.h>
 
 /*----------------------------------------------------------------------------*/
-#define DRV_NAME "retrogame_joypad"
+#define DRV_NAME "retrogame_joypad_x55"
 #define __MURMUR__
 /*----------------------------------------------------------------------------*/
 
-- 
2.34.1

